// –ß—Ç–æ –º—ã —Å–æ–∑–¥–∞–¥–∏–º:
// –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—è–º–∏: –ò–º—è Email –ü–∞—Ä–æ–ª—å
//
// –ë—É–¥–µ—Ç:
// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ,  –ü—Ä–æ–≤–µ—Ä–∫–∞ email-—Ñ–æ—Ä–º–∞—Ç–∞,  –°–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è
// –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: RegistrationForm(),
    );
  }
}

class RegistrationForm extends StatefulWidget {
  @override
  _RegistrationFormState createState() => _RegistrationFormState();
}

class _RegistrationFormState extends State<RegistrationForm> {
  final _formKey = GlobalKey<FormState>();

  final nameController = TextEditingController();
  final emailController = TextEditingController();
  final passwordController = TextEditingController();

  bool _obscurePassword = true;

  @override
  void dispose() {
    nameController.dispose();
    emailController.dispose();
    passwordController.dispose();
    super.dispose();
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      // –í—Å–µ –ø–æ–ª—è –≤–∞–ª–∏–¥–Ω—ã
      print('–ò–º—è: ${nameController.text}');
      print('Email: ${emailController.text}');
      print('–ü–∞—Ä–æ–ª—å: ${passwordController.text}');

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey, // –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª—é—á —Ñ–æ—Ä–º—ã
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –ò–º—è
              TextFormField(
                controller: nameController,
                decoration: InputDecoration(
                  labelText: '–ò–º—è',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),

              // Email
              TextFormField(
                controller: emailController,
                keyboardType: TextInputType.emailAddress,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–í–≤–µ–¥–∏—Ç–µ email';
                  }
                  if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
                    return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),

              // –ü–∞—Ä–æ–ª—å
              TextFormField(
                controller: passwordController,
                obscureText: _obscurePassword,
                decoration: InputDecoration(
                  labelText: '–ü–∞—Ä–æ–ª—å',
                  border: OutlineInputBorder(),
                  suffixIcon: IconButton(
                    icon: Icon(_obscurePassword
                        ? Icons.visibility
                        : Icons.visibility_off),
                    onPressed: () {
                      setState(() {
                        _obscurePassword = !_obscurePassword;
                      });
                    },
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
                  }
                  if (value.length < 6) {
                    return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
                  }
                  return null;
                },
              ),
              SizedBox(height: 24),

              // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
              Center(
                child: ElevatedButton(
                  onPressed: _submitForm,
                  child: Text('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
/*

##

| –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å        | –ß—Ç–æ —Ç—ã –æ—Å–≤–∞–∏–≤–∞–µ—à—å                          |
| ----------------------- | ------------------------------------------ |
| `TextFormField`         | –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π                   |
| `TextEditingController` | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º                         |
| `Form` + `GlobalKey`    | –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏                           |
| `SnackBar`              | –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é                   |
| `setState`              | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (`–æ–±—Å–∫—É—Ä–∏—Ç—å` –ø–∞—Ä–æ–ª—å) |
| –í–∞–ª–∏–¥–∞—Ü–∏—è               | –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è                |


---

## üü¶ 1. `TextField` –∏ `TextFormField` ‚Äî –≤ —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞?

| –°–≤–æ–π—Å—Ç–≤–æ              | `TextField`         | `TextFormField`            |
| --------------------- | ------------------- | -------------------------- |
| –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å —Ñ–æ—Ä–º–æ–π | ‚ùå (–Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é)   | ‚úÖ –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ `Form`        |
| `validator:`          | ‚ùå –Ω–µ—Ç               | ‚úÖ –µ—Å—Ç—å                     |
| –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–ª—è   | ‚úÖ –î–∞                | ‚úÖ –î–∞, –Ω–æ –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ñ–æ—Ä–º |
| –£–¥–æ–±–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ö       | ‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–¥–∞ | ‚úÖ –ë–æ–ª–µ–µ —É–¥–æ–±–µ–Ω             |

> üìå **–ò–¢–û–ì–û**: –ï—Å–ª–∏ —É —Ç–µ–±—è **—Ñ–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π `TextFormField`.

---

## üü¶ 2. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã `TextFormField` / `TextField`

| –ü–∞—Ä–∞–º–µ—Ç—Ä                              | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ                                  |
| ------------------------------------- | ------------------------------------------- |
| `controller:`                         | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º                          |
| `decoration:`                         | –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–æ–ª—è                            |
| `keyboardType:`                       | –¢–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ç–µ–∫—Å—Ç, email, —á–∏—Å–ª–æ –∏ —Ç.–¥.) |
| `obscureText:`                        | –°–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä–æ–ª—å)           |
| `onChanged:`                          | –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–æ–¥                             |
| `validator:` (—Ç–æ–ª—å–∫–æ `TextFormField`) | –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞                 |
| `autofocus:`                          | –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏                      |
| `enabled:`                            | –í–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ –ø–æ–ª–µ                     |
| `readOnly:`                           | –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è                           |
| `style:`                              | –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞                                |
| `maxLength:`                          | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞                   |
| `maxLines:`                           | –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ                          |

---

*/